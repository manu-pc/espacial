/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gui;
import aplicacion.FachadaAplicacion;
import aplicacion.TipoCuerpoCeleste;
import aplicacion.CuerpoCeleste;
import java.awt.event.ActionEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import aplicacion.CustomException;

/**
 *
 * @author alumnogreibd
 */
public class VCuerpoCeleste extends javax.swing.JDialog {

    private VPrincipal padre;
    FachadaAplicacion fa;
    
    public VCuerpoCeleste(java.awt.Frame parent, boolean modal, FachadaAplicacion fa) {
        super(parent, modal);
        this.fa = fa;
        initComponents();
        initManualComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombre_cuerpoceleste = new javax.swing.JLabel();
        nombre_cuerpoceleste_text = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCuerpos = new javax.swing.JTable();
        nuevo_cuerpoButton = new javax.swing.JButton();
        borrar_cuerpoButton = new javax.swing.JButton();
        guardar_cuerpoButton = new javax.swing.JButton();
        salirButton = new javax.swing.JButton();
        nombreModif = new javax.swing.JLabel();
        nombreModifText = new javax.swing.JTextField();
        ubicacionModif = new javax.swing.JLabel();
        ubicacionModifText = new javax.swing.JTextField();
        masaModif = new javax.swing.JLabel();
        masaModifText = new javax.swing.JTextField();
        tamanhoModif = new javax.swing.JLabel();
        tamanhoModifText = new javax.swing.JTextField();
        TSuperfModif = new javax.swing.JLabel();
        TSuperfModifText = new javax.swing.JTextField();
        galaxiaModif = new javax.swing.JLabel();
        galaxiaModifText = new javax.swing.JTextField();
        tiposCombo = new javax.swing.JComboBox<>();
        buscarButton = new javax.swing.JButton();
        habitabilidadBox = new javax.swing.JCheckBox();
        descripcionModif = new javax.swing.JLabel();
        descModifText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        nombre_cuerpoceleste.setText("Nombre");

        tablaCuerpos.setModel(new ModeloTablaCuerposCelestes());
        jScrollPane1.setViewportView(tablaCuerpos);

        nuevo_cuerpoButton.setText("Nuevo");
        nuevo_cuerpoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevo_cuerpoButtonActionPerformed(evt);
            }
        });

        borrar_cuerpoButton.setText("Borrar");
        borrar_cuerpoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrar_cuerpoButtonActionPerformed(evt);
            }
        });

        guardar_cuerpoButton.setText("Guardar");
        guardar_cuerpoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar_cuerpoButtonActionPerformed(evt);
            }
        });

        salirButton.setText("Salir");
        salirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirButtonActionPerformed(evt);
            }
        });

        nombreModif.setText("Nombre");

        nombreModifText.setEditable(false);
        nombreModifText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreModifTextActionPerformed(evt);
            }
        });

        ubicacionModif.setText("Ubicación");

        masaModif.setText("Masa");

        tamanhoModif.setText("Tamaño");

        TSuperfModif.setText("T.Superficie");

        galaxiaModif.setText("Galaxia");

        tiposCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione:", "Planeta", "Estrella", "Luna" }));

        buscarButton.setText("Buscar");
        buscarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarButtonActionPerformed(evt);
            }
        });

        habitabilidadBox.setText("Habitabilidad");

        descripcionModif.setText("Descripción");

        descModifText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descModifTextActionPerformed(evt);
            }
        });

        jButton1.setText("Galaxias");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nombre_cuerpoceleste)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nombre_cuerpoceleste_text, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buscarButton)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(descripcionModif)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(descModifText))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nuevo_cuerpoButton)
                                .addGap(18, 18, 18)
                                .addComponent(borrar_cuerpoButton)
                                .addGap(18, 18, 18)
                                .addComponent(guardar_cuerpoButton)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(264, 264, 264)
                                .addComponent(salirButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nombreModif)
                                    .addComponent(tamanhoModif))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tamanhoModifText, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                    .addComponent(nombreModifText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(TSuperfModif)
                                    .addComponent(ubicacionModif))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TSuperfModifText, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(ubicacionModifText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(galaxiaModif)
                                        .addGap(5, 5, 5))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(masaModif)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(galaxiaModifText, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                    .addComponent(masaModifText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tiposCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(habitabilidadBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(62, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre_cuerpoceleste)
                    .addComponent(nombre_cuerpoceleste_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buscarButton))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nombreModifText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nombreModif)
                        .addComponent(ubicacionModif)
                        .addComponent(ubicacionModifText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(masaModif)
                        .addComponent(masaModifText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tiposCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamanhoModifText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tamanhoModif)
                    .addComponent(TSuperfModif)
                    .addComponent(TSuperfModifText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(galaxiaModif)
                    .addComponent(galaxiaModifText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(habitabilidadBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descripcionModif)
                    .addComponent(descModifText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar_cuerpoButton)
                    .addComponent(borrar_cuerpoButton)
                    .addComponent(nuevo_cuerpoButton)
                    .addComponent(salirButton)
                    .addComponent(jButton1))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void initManualComponents() {
        ModeloTablaCuerposCelestes m = (ModeloTablaCuerposCelestes) tablaCuerpos.getModel();

        tablaCuerpos.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                colocarInformacionSeleccionada(m);
            }
        });
    }
    private void salirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirButtonActionPerformed
       this.dispose();
    }//GEN-LAST:event_salirButtonActionPerformed

    private void buscarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarButtonActionPerformed
       buscarCuerposCelestes();
    }//GEN-LAST:event_buscarButtonActionPerformed

    private void descModifTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descModifTextActionPerformed
        modificarCuerpo();
    }//GEN-LAST:event_descModifTextActionPerformed

    private void borrar_cuerpoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrar_cuerpoButtonActionPerformed
        borrarCuerpo();
    }//GEN-LAST:event_borrar_cuerpoButtonActionPerformed

    private void nuevo_cuerpoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevo_cuerpoButtonActionPerformed
        VAltaCuerpo dialog = new VAltaCuerpo(new javax.swing.JFrame(), true, fa);

        dialog.setVisible(true);     
    }//GEN-LAST:event_nuevo_cuerpoButtonActionPerformed

    private void nombreModifTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreModifTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreModifTextActionPerformed

    private void guardar_cuerpoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar_cuerpoButtonActionPerformed
        modificarCuerpo();
    }//GEN-LAST:event_guardar_cuerpoButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TSuperfModif;
    private javax.swing.JTextField TSuperfModifText;
    private javax.swing.JButton borrar_cuerpoButton;
    private javax.swing.JButton buscarButton;
    private javax.swing.JTextField descModifText;
    private javax.swing.JLabel descripcionModif;
    private javax.swing.JLabel galaxiaModif;
    private javax.swing.JTextField galaxiaModifText;
    private javax.swing.JButton guardar_cuerpoButton;
    private javax.swing.JCheckBox habitabilidadBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel masaModif;
    private javax.swing.JTextField masaModifText;
    private javax.swing.JLabel nombreModif;
    private javax.swing.JTextField nombreModifText;
    private javax.swing.JLabel nombre_cuerpoceleste;
    private javax.swing.JTextField nombre_cuerpoceleste_text;
    private javax.swing.JButton nuevo_cuerpoButton;
    private javax.swing.JButton salirButton;
    private javax.swing.JTable tablaCuerpos;
    private javax.swing.JLabel tamanhoModif;
    private javax.swing.JTextField tamanhoModifText;
    private javax.swing.JComboBox<String> tiposCombo;
    private javax.swing.JLabel ubicacionModif;
    private javax.swing.JTextField ubicacionModifText;
    // End of variables declaration//GEN-END:variables

private void buscarCuerposCelestes() {
        ModeloTablaCuerposCelestes m;

        m = (ModeloTablaCuerposCelestes) tablaCuerpos.getModel();
        java.util.ArrayList <CuerpoCeleste> lista = (java.util.ArrayList <CuerpoCeleste>) fa.obtenerCuerpos(nombre_cuerpoceleste_text.getText());

        m.setFilas(lista);
        if (m.getRowCount() > 0) {

            tablaCuerpos.setRowSelectionInterval(0, 0);
            colocarInformacionSeleccionada(m);

        } else {
            guardar_cuerpoButton.setEnabled(false);
            borrar_cuerpoButton.setEnabled(false);
            System.out.println("consulta vacía");
        }
        
    }

 private void colocarInformacionSeleccionada(ModeloTablaCuerposCelestes m) {

        if (tablaCuerpos.getSelectedRow() >= 0) {
            CuerpoCeleste seleccionado = m.obtenerCuerpo(tablaCuerpos.getSelectedRow());

            nombreModifText.setText(seleccionado.getNombreCuerpoCeleste());
            ubicacionModifText.setText(seleccionado.getUbicacion());
            habitabilidadBox.setSelected(seleccionado.getHabitabilidad());
            masaModifText.setText(String.valueOf(seleccionado.getMasa()));
            tamanhoModifText.setText(String.valueOf(seleccionado.getTamanho()));
            TSuperfModifText.setText(String.valueOf(seleccionado.getTemperaturaSuperficie()));
            descModifText.setText(seleccionado.getDescripcion());
            galaxiaModifText.setText(seleccionado.getGalaxia());
            tiposCombo.setSelectedItem(seleccionado.getTipo().name());
            guardar_cuerpoButton.setEnabled(true);
            borrar_cuerpoButton.setEnabled(true);
        }
    }

    private void modificarCuerpo() {
        if (fa.getSudo()) {
            try {
                float masa = Float.parseFloat(masaModifText.getText());
                float tamanho = Float.parseFloat(tamanhoModifText.getText());
                float temp = Float.parseFloat(TSuperfModifText.getText());
                String nombreCuerpo = nombreModifText.getText();
                String ubicacion = ubicacionModifText.getText();
                Boolean habitabilidad = habitabilidadBox.isSelected();
                String desc = descModifText.getText();
                String galaxia = galaxiaModifText.getText();
                TipoCuerpoCeleste tipo;
                
                if (ubicacion.isEmpty()) {
                    throw new CustomException("Debe rellenarse la ubicacion.");
                }
                if (masa < 0) {
                    throw new CustomException("Valor negativo no valido.");
                }
                if (tamanho<0) {
                    throw new CustomException("Valor negativo no valido.");
                }
                if (desc.isEmpty()) {
                    throw new CustomException("Debe rellenarse la el campo descripcion.");
                }
                if (galaxia.isEmpty()) {
                    throw new CustomException("Debe rellenarse la galaxia.");
                }
                if(tiposCombo.getSelectedItem().equals("Seleccione:")){
                    throw new CustomException("Debe rellenarse con un valor valido.");
                }
                else{
                    tipo = TipoCuerpoCeleste.valueOf((String) tiposCombo.getSelectedItem());}
                CuerpoCeleste modificado = new CuerpoCeleste(nombreCuerpo, tipo, ubicacion, habitabilidad, masa, tamanho, temp, desc, galaxia);
                fa.modificarCuerpo(modificado);

                buscarButton.doClick();
                ModeloTablaCuerposCelestes m = (ModeloTablaCuerposCelestes) tablaCuerpos.getModel();
                int index = 0;
                for (int i = 0; i < m.getCuerpos().size(); i++) {
                    if (m.getCuerpos().get(i).getNombreCuerpoCeleste().equals(nombreCuerpo)) {
                        index = i;
                    }
                }
                tablaCuerpos.setRowSelectionInterval(index, index);

            } catch (CustomException exception) {
                fa.muestraExcepcion(exception.getMessage());
            } catch (IllegalArgumentException ilegal) {
                fa.muestraExcepcion("Es necesario rellenar el tipo de cuerpo celeste");
            }
        } else {
            fa.muestraExcepcion("Los usuarios normales no tienen permiso para modificar cuerpos celestes");
        }

    }

    private void borrarCuerpo() { 
        if (tablaCuerpos.getSelectedRowCount() == 1) {

            ModeloTablaCuerposCelestes m = (ModeloTablaCuerposCelestes) tablaCuerpos.getModel();

            CuerpoCeleste seleccionado = m.obtenerCuerpo(tablaCuerpos.getSelectedRow());
            fa.borrarCuerpo(seleccionado.getNombreCuerpoCeleste());
            buscarButton.doClick();
        } else {
            fa.muestraExcepcion("Debe seleccionarse exactamente un cuerpo celeste para borrar.");
        }
    }
 
 
}
